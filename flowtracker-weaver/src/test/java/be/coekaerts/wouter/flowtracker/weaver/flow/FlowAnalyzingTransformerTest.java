package be.coekaerts.wouter.flowtracker.weaver.flow;

import static org.junit.Assert.assertEquals;

import be.coekaerts.wouter.flowtracker.weaver.debug.CommentTextifier;
import be.coekaerts.wouter.flowtracker.weaver.debug.RealCommentator;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.function.Consumer;
import org.junit.Test;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.util.CheckClassAdapter;
import org.objectweb.asm.util.Textifier;
import org.objectweb.asm.util.TraceMethodVisitor;

/**
 * Tests for FlowAnalyzingTransformer by inspecting generated bytecode. flowtracker mostly tests
 * FlowAnalyzingTransformer indirectly, by executing instrumented code, but this test class is an
 * exception to that: testing if the bytecode looks as expected.
 *
 * <p>These tests are fragile (depend on the exact bytecode generated by the compiler), and are
 * completely written by copy-pasting the actual output as the expected output, and they don't check
 * that the generated code actually does what we want it to do. It only covers a couple
 * transformations, because doing this for everything would be too verbose. So in that sense this is
 * not a great test class at all. But seeing the original and generated bytecode next to each other
 * makes this a convenient tool to help understand what's going on with the bytecode exactly, and
 * for debugging.
 */
public class FlowAnalyzingTransformerTest {

  @Test
  public void testArraycopy() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    void t(byte[] bytes1, byte[] bytes2) {
                      System.arraycopy(bytes1, 1, bytes2, 2, 3);
                    }
                  },
        // original code
        "ALOAD 1\n"
            + "ICONST_1\n"
            + "ALOAD 2\n"
            + "ICONST_2\n"
            + "ICONST_3\n"
            + "INVOKESTATIC java/lang/System.arraycopy (Ljava/lang/Object;ILjava/lang/Object;II)V\n"
            + "RETURN\n"
            + "MAXSTACK = 5\n"
            + "MAXLOCALS = 3\n",
        // transformed code
        "ALOAD 1\n"
            + "ICONST_1\n"
            + "ALOAD 2\n"
            + "ICONST_2\n"
            + "ICONST_3\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/SystemHook.arraycopy (Ljava/lang/Object;ILjava/lang/Object;II)V\n"
            + "RETURN\n"
            + "MAXSTACK = 5\n"
            + "MAXLOCALS = 3\n");
  }

  /**
   * Test insertion of code to get tracker and pass it to a hook, using the simple example of an
   * array load and store
   */
  @Test
  public void testTracker() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    void t(byte[] bytes1, byte[] bytes2) {
                      bytes1[1] = bytes2[2];
                    }
                  },
        // original code
        "ALOAD 1\n"
            + "ICONST_1\n"
            + "ALOAD 2\n"
            + "ICONST_2\n"
            + "BALOAD\n"
            + "BASTORE\n"
            + "RETURN\n"
            + "MAXSTACK = 4\n"
            + "MAXLOCALS = 3\n",
        // transformed code
        "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 3\n"
            + "ALOAD 1\n"
            + "ICONST_1\n"
            + "ALOAD 2\n"
            + "ICONST_2\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 3\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "BALOAD\n"
            + "// begin ArrayStore.insertTrackStatements: ArrayHook.set*(array, arrayIndex, value [already on stack], sourcePoint)\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 3\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayHook.setByte ([BIBLbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)V\n"
            + "// end ArrayStore.insertTrackStatements\n"
            + "RETURN\n"
            + "MAXSTACK = 6\n"
            + "MAXLOCALS = 4\n");
  }

  @Test
  public void testFrames() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    void t(char[] out, char[] in, boolean b) {
                      char ch = in[0];
                      if (b) {
                        return;
                      }
                      out[0] = ch;
                    }
                  },
        // original code
        "ALOAD 2\n"
            + "ICONST_0\n"
            + "CALOAD\n"
            + "ISTORE 4\n"
            + "ILOAD 3\n"
            + "IFEQ L0\n"
            + "RETURN\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ [C [C I I] []\n"
            + "ALOAD 1\n"
            + "ICONST_0\n"
            + "ILOAD 4\n"
            + "CASTORE\n"
            + "RETURN\n"
            + "MAXSTACK = 3\n"
            + "MAXLOCALS = 5\n",
        // transformed code
        "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 4\n"
            + "ALOAD 2\n"
            + "ICONST_0\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 4\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "CALOAD\n"
            + "ISTORE 5\n"
            + "ILOAD 3\n"
            + "IFEQ L0\n"
            + "RETURN\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ [C [C I be/coekaerts/wouter/flowtracker/tracker/TrackerPoint I] []\n"
            + "ALOAD 1\n"
            + "ICONST_0\n"
            + "ILOAD 5\n"
            + "// begin ArrayStore.insertTrackStatements: ArrayHook.set*(array, arrayIndex, value [already on stack], sourcePoint)\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 4\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayHook.setChar ([CICLbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)V\n"
            + "// end ArrayStore.insertTrackStatements\n"
            + "RETURN\n"
            + "MAXSTACK = 6\n"
            + "MAXLOCALS = 6\n");
  }

  static char[] myCharArray;
  static byte[] myByteArray;
  static boolean myBoolean;
  static InputStream inputStream;
  static OutputStream outputStream;

  @Test
  public void testFramesLoop() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    void t() {
                      while (myBoolean) {
                        myCharArray[0] = myCharArray[1];
                      }
                    }
                  },
        // original code
        "L0\n"
            + "FRAME FULL [$THIS$] []\n"
            + "GETSTATIC $THISTEST$.myBoolean : Z\n"
            + "IFEQ L1\n"
            + "GETSTATIC $THISTEST$.myCharArray : [C\n"
            + "ICONST_0\n"
            + "GETSTATIC $THISTEST$.myCharArray : [C\n"
            + "ICONST_1\n"
            + "CALOAD\n"
            + "CASTORE\n"
            + "GOTO L0\n"
            + "L1\n"
            + "FRAME FULL [$THIS$] []\n"
            + "RETURN\n"
            + "MAXSTACK = 4\n"
            + "MAXLOCALS = 1\n",
        // transformed code
        "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 1\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ be/coekaerts/wouter/flowtracker/tracker/TrackerPoint] []\n"
            + "GETSTATIC $THISTEST$.myBoolean : Z\n"
            + "IFEQ L1\n"
            + "GETSTATIC $THISTEST$.myCharArray : [C\n"
            + "ICONST_0\n"
            + "GETSTATIC $THISTEST$.myCharArray : [C\n"
            + "ICONST_1\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 1\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "CALOAD\n"
            + "// begin ArrayStore.insertTrackStatements: ArrayHook.set*(array, arrayIndex, value [already on stack], sourcePoint)\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 1\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayHook.setChar ([CICLbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)V\n"
            + "// end ArrayStore.insertTrackStatements\n"
            + "GOTO L0\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ be/coekaerts/wouter/flowtracker/tracker/TrackerPoint] []\n"
            + "RETURN\n"
            + "MAXSTACK = 6\n"
            + "MAXLOCALS = 2\n");
  }

  /**
   * Storing in a boolean array also uses BASTORE; that should not be confused with storing in a
   * byte array
   */
  @Test
  public void booleanArrayStore() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    void t(boolean[] bs) {
                      bs[0] = true;
                    }
                  },
        "ALOAD 1\n"
            + "ICONST_0\n"
            + "ICONST_1\n"
            + "BASTORE\n"
            + "RETURN\n"
            + "MAXSTACK = 3\n"
            + "MAXLOCALS = 2\n",
        "ALOAD 1\n"
            + "ICONST_0\n"
            + "ICONST_1\n"
            + "BASTORE\n"
            + "RETURN\n"
            + "MAXSTACK = 3\n"
            + "MAXLOCALS = 2\n");
  }

  /** Test instrumentation using {@link StringComparison} */
  @Test
  public void stringEq() {
    testTransform(new Object() {
                    @SuppressWarnings({"unused", "StringEquality"})
                    boolean eq(String s1, String s2) {
                      return s1 == s2;
                    }
                  },
        "ALOAD 1\n"
            + "ALOAD 2\n"
            + "IF_ACMPNE L0\n"
            + "ICONST_1\n"
            + "GOTO L1\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ java/lang/String java/lang/String] []\n"
            + "ICONST_0\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ java/lang/String java/lang/String] [I]\n"
            + "IRETURN\n"
            + "MAXSTACK = 2\n"
            + "MAXLOCALS = 3\n",
        "ALOAD 1\n"
            + "ALOAD 2\n"
            + "// StringComparison.insertTrackStatements\n"
            + "INVOKESTATIC java/util/Objects.equals (Ljava/lang/Object;Ljava/lang/Object;)Z\n"
            + "IFEQ L0\n"
            + "ICONST_1\n"
            + "GOTO L1\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ java/lang/String java/lang/String] []\n"
            + "ICONST_0\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ java/lang/String java/lang/String] [I]\n"
            + "IRETURN\n"
            + "MAXSTACK = 2\n"
            + "MAXLOCALS = 3\n");
  }

  /** Test instrumentation using {@link StringComparison} */
  @Test
  public void stringEqWithSwap() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    boolean eq(Object s1, String s2) {
                      return s1 == s2;
                    }
                  },
        "ALOAD 1\n"
            + "ALOAD 2\n"
            + "IF_ACMPNE L0\n"
            + "ICONST_1\n"
            + "GOTO L1\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ java/lang/Object java/lang/String] []\n"
            + "ICONST_0\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ java/lang/Object java/lang/String] [I]\n"
            + "IRETURN\n"
            + "MAXSTACK = 2\n"
            + "MAXLOCALS = 3\n",
        "ALOAD 1\n"
            + "ALOAD 2\n"
            + "// StringComparison.insertTrackStatements\n"
            + "SWAP\n"
            + "INVOKESTATIC java/util/Objects.equals (Ljava/lang/Object;Ljava/lang/Object;)Z\n"
            + "IFEQ L0\n"
            + "ICONST_1\n"
            + "GOTO L1\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ java/lang/Object java/lang/String] []\n"
            + "ICONST_0\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ java/lang/Object java/lang/String] [I]\n"
            + "IRETURN\n"
            + "MAXSTACK = 2\n"
            + "MAXLOCALS = 3\n");
  }

  /** Test Instrumentation using {@link InvocationReturnValue} */
  @Test
  public void invocationReturnValue() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    void t(byte[] bytes) throws IOException {
                      bytes[1] = (byte) inputStream.read();
                    }
                  },
        // original code
        "ALOAD 1\n"
            + "ICONST_1\n"
            + "GETSTATIC $THISTEST$.inputStream : Ljava/io/InputStream;\n"
            + "INVOKEVIRTUAL java/io/InputStream.read ()I\n"
            + "I2B\n"
            + "BASTORE\n"
            + "RETURN\n"
            + "MAXSTACK = 3\n"
            + "MAXLOCALS = 2\n",
        // transformed code
        "// Initialize newLocal InvocationReturnValue invocation\n"
            + "ACONST_NULL\n"
            + "ASTORE 2\n"
            + "ALOAD 1\n"
            + "ICONST_1\n"
            + "GETSTATIC $THISTEST$.inputStream : Ljava/io/InputStream;\n"
            + "// begin InvocationOutgoingTransformation.ensureInstrumented\n"
            + "LDC \"read ()I\"\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.createCalling (Ljava/lang/String;)Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "ASTORE 2\n"
            + "// end InvocationOutgoingTransformation.ensureInstrumented\n"
            + "INVOKEVIRTUAL java/io/InputStream.read ()I\n"
            + "I2B\n"
            + "// begin ArrayStore.insertTrackStatements: ArrayHook.set*(array, arrayIndex, value [already on stack], sourcePoint)\n"
            + "// InvocationReturnValue.loadSourcePoint\n"
            + "ALOAD 2\n"
            + "GETFIELD be/coekaerts/wouter/flowtracker/tracker/Invocation.returnPoint : Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayHook.setByte ([BIBLbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)V\n"
            + "// end ArrayStore.insertTrackStatements\n"
            + "RETURN\n"
            + "MAXSTACK = 6\n"
            + "MAXLOCALS = 3\n");
  }

  /** Test Instrumentation using {@link InvocationReturnStore} */
  @Test
  public void invocationReturnStore() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    int read() {
                      return myByteArray[1];
                    }
                  },
        // original code
        "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "BALOAD\n"
            + "IRETURN\n"
            + "MAXSTACK = 2\n"
            + "MAXLOCALS = 1\n",
        // transformed code
        "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 1\n"
            + "// Initialize newLocal InvocationTransformation invocation\n"
            + "LDC \"read ()I\"\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.start (Ljava/lang/String;)Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "ASTORE 2\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 1\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "BALOAD\n"
            + "// begin InvocationReturnStore.insertTrackStatements\n"
            + "ALOAD 2\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 1\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.returning (Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)V\n"
            + "// end InvocationReturnStore.insertTrackStatements\n"
            + "IRETURN\n"
            + "MAXSTACK = 4\n"
            + "MAXLOCALS = 3\n");
  }

  /** Test Instrumentation using {@link InvocationArgStore} */
  @Test
  public void invocationArgStore() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    void t(byte[] bytes) throws IOException {
                      outputStream.write(bytes[1]);
                    }
                  },
        // original code
        "GETSTATIC $THISTEST$.outputStream : Ljava/io/OutputStream;\n"
            + "ALOAD 1\n"
            + "ICONST_1\n"
            + "BALOAD\n"
            + "INVOKEVIRTUAL java/io/OutputStream.write (I)V\n"
            + "RETURN\n"
            + "MAXSTACK = 3\n"
            + "MAXLOCALS = 2\n",
        // transformed code
        "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 2\n"
            + "GETSTATIC $THISTEST$.outputStream : Ljava/io/OutputStream;\n"
            + "ALOAD 1\n"
            + "ICONST_1\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 2\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "BALOAD\n"
            + "// begin InvocationOutgoingTransformation.ensureInstrumented\n"
            + "LDC \"write (I)V\"\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.create (Ljava/lang/String;)Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "// begin InvocationArgStore.insertTrackStatements\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 2\n"
            + "INVOKEVIRTUAL be/coekaerts/wouter/flowtracker/tracker/Invocation.setArg0 (Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "// end InvocationArgStore.insertTrackStatements\n"
            + "INVOKEVIRTUAL be/coekaerts/wouter/flowtracker/tracker/Invocation.calling ()Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "POP\n"
            + "// end InvocationOutgoingTransformation.ensureInstrumented\n"
            + "INVOKEVIRTUAL java/io/OutputStream.write (I)V\n"
            + "RETURN\n"
            + "MAXSTACK = 5\n"
            + "MAXLOCALS = 3\n");
  }

  /** Test Instrumentation using {@link InvocationArgValue} */
  @Test
  public void invocationArgValue() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    void write(int b) {
                      myByteArray[1] = (byte) b;
                    }
                  },
        // original code
        "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "ILOAD 1\n"
            + "I2B\n"
            + "BASTORE\n"
            + "RETURN\n"
            + "MAXSTACK = 3\n"
            + "MAXLOCALS = 2\n",
        // transformed code
        "// Initialize newLocal InvocationTransformation invocation\n"
            + "LDC \"write (I)V\"\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.start (Ljava/lang/String;)Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "ASTORE 2\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "ILOAD 1\n"
            + "I2B\n"
            + "// begin ArrayStore.insertTrackStatements: ArrayHook.set*(array, arrayIndex, value [already on stack], sourcePoint)\n"
            + "// InvocationArgValue.loadSourcePoint\n"
            + "ALOAD 2\n"
            + "ICONST_0\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.getArgPoint (Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayHook.setByte ([BIBLbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)V\n"
            + "// end ArrayStore.insertTrackStatements\n"
            + "RETURN\n"
            + "MAXSTACK = 6\n"
            + "MAXLOCALS = 3\n");
  }

  /**
   * Test instrumentation when both {@link InvocationReturnValue} and {@link InvocationArgStore}
   * apply to the same invocation
   */
  @Test
  public void invocationReturnAndArg() {
    testTransform(new Object() {
      @SuppressWarnings("unused")
      void t(byte[] bytes) {
        bytes[1] = trackInAndOut(bytes[0]);
      }
    },
        "ALOAD 1\n"
            + "ICONST_1\n"
            + "ALOAD 1\n"
            + "ICONST_0\n"
            + "BALOAD\n"
            + "INVOKESTATIC $THISTEST$.trackInAndOut (B)B\n"
            + "BASTORE\n"
            + "RETURN\n"
            + "MAXSTACK = 4\n"
            + "MAXLOCALS = 2\n",
        "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 2\n"
            + "// Initialize newLocal InvocationReturnValue invocation\n"
            + "ACONST_NULL\n"
            + "ASTORE 3\n"
            + "ALOAD 1\n"
            + "ICONST_1\n"
            + "ALOAD 1\n"
            + "ICONST_0\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 2\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "BALOAD\n"
            + "// begin InvocationOutgoingTransformation.ensureInstrumented\n"
            + "LDC \"trackInAndOut (B)B\"\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.create (Ljava/lang/String;)Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "// begin InvocationArgStore.insertTrackStatements\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 2\n"
            + "INVOKEVIRTUAL be/coekaerts/wouter/flowtracker/tracker/Invocation.setArg0 (Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "// end InvocationArgStore.insertTrackStatements\n"
            + "INVOKEVIRTUAL be/coekaerts/wouter/flowtracker/tracker/Invocation.calling ()Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "ASTORE 3\n"
            + "// end InvocationOutgoingTransformation.ensureInstrumented\n"
            + "INVOKESTATIC $THISTEST$.trackInAndOut (B)B\n"
            + "// begin ArrayStore.insertTrackStatements: ArrayHook.set*(array, arrayIndex, value [already on stack], sourcePoint)\n"
            + "// InvocationReturnValue.loadSourcePoint\n"
            + "ALOAD 3\n"
            + "GETFIELD be/coekaerts/wouter/flowtracker/tracker/Invocation.returnPoint : Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayHook.setByte ([BIBLbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)V\n"
            + "// end ArrayStore.insertTrackStatements\n"
            + "RETURN\n"
            + "MAXSTACK = 6\n"
            + "MAXLOCALS = 4\n");
  }

  @Test
  public void mergeTrackableValues() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    int read(boolean b) {
                      return b ? myByteArray[0] : myByteArray[1];
                    }
                  },
        "ILOAD 1\n"
            + "IFEQ L0\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_0\n"
            + "BALOAD\n"
            + "GOTO L1\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ I] []\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "BALOAD\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ I] [I]\n"
            + "IRETURN\n"
            + "MAXSTACK = 2\n"
            + "MAXLOCALS = 2\n",
        "// Initialize newLocal MergedValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 2\n"
            + "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 3\n"
            + "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 4\n"
            + "// Initialize newLocal InvocationTransformation invocation\n"
            + "LDC \"read (Z)I\"\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.start (Ljava/lang/String;)Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "ASTORE 5\n"
            + "ILOAD 1\n"
            + "IFEQ L0\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_0\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 4\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "BALOAD\n"
            + "// MergedValue (TrackerPoint in 2)\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 4\n"
            + "ASTORE 2\n"
            + "GOTO L1\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ I be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/Invocation] []\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 3\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "BALOAD\n"
            + "// MergedValue (TrackerPoint in 2)\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 3\n"
            + "ASTORE 2\n"
            + "// FYI MergedValue merges here (TrackerPoint in 2)\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ I be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/Invocation] [I]\n"
            + "// begin InvocationReturnStore.insertTrackStatements\n"
            + "ALOAD 5\n"
            + "// MergedValue.loadSourcePoint\n"
            + "ALOAD 2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.returning (Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)V\n"
            + "// end InvocationReturnStore.insertTrackStatements\n"
            + "IRETURN\n"
            + "MAXSTACK = 4\n"
            + "MAXLOCALS = 6\n");
  }

  @Test
  public void mergeCopyValues() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    int read(boolean b) {
                      byte x = myByteArray[0];
                      byte y = myByteArray[1];
                      return b ? x : y;
                    }
                  },
        "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_0\n"
            + "BALOAD\n"
            + "ISTORE 2\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "BALOAD\n"
            + "ISTORE 3\n"
            + "ILOAD 1\n"
            + "IFEQ L0\n"
            + "ILOAD 2\n"
            + "GOTO L1\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ I I I] []\n"
            + "ILOAD 3\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ I I I] [I]\n"
            + "IRETURN\n"
            + "MAXSTACK = 2\n"
            + "MAXLOCALS = 4\n",
        "// Initialize newLocal MergedValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 2\n"
            + "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 3\n"
            + "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 4\n"
            + "// Initialize newLocal InvocationTransformation invocation\n"
            + "LDC \"read (Z)I\"\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.start (Ljava/lang/String;)Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "ASTORE 5\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_0\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 4\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "BALOAD\n"
            + "ISTORE 6\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 3\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "BALOAD\n"
            + "ISTORE 7\n"
            + "ILOAD 1\n"
            + "IFEQ L0\n"
            + "ILOAD 6\n"
            + "// MergedValue (TrackerPoint in 2)\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 4\n"
            + "ASTORE 2\n"
            + "GOTO L1\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ I be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/Invocation I I] []\n"
            + "ILOAD 7\n"
            + "// MergedValue (TrackerPoint in 2)\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 3\n"
            + "ASTORE 2\n"
            + "// FYI MergedValue merges here (TrackerPoint in 2)\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ I be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/Invocation I I] [I]\n"
            + "// begin InvocationReturnStore.insertTrackStatements\n"
            + "ALOAD 5\n"
            + "// MergedValue.loadSourcePoint\n"
            + "ALOAD 2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.returning (Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)V\n"
            + "// end InvocationReturnStore.insertTrackStatements\n"
            + "IRETURN\n"
            + "MAXSTACK = 4\n"
            + "MAXLOCALS = 8\n");
  }

  @Test
  public void mergeCopyValuesLocalVar() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    int read(boolean b) {
                      byte x = myByteArray[0];
                      byte y = myByteArray[1];
                      byte r;
                      if (b) {
                        r = x;
                      } else {
                        r = y;
                      }
                      return r;
                    }
                  },
        "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_0\n"
            + "BALOAD\n"
            + "ISTORE 2\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "BALOAD\n"
            + "ISTORE 3\n"
            + "ILOAD 1\n"
            + "IFEQ L0\n"
            + "ILOAD 2\n"
            + "ISTORE 4\n"
            + "GOTO L1\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ I I I] []\n"
            + "ILOAD 3\n"
            + "ISTORE 4\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ I I I I] []\n"
            + "ILOAD 4\n"
            + "IRETURN\n"
            + "MAXSTACK = 2\n"
            + "MAXLOCALS = 5\n",
        "// Initialize newLocal MergedValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 2\n"
            + "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 3\n"
            + "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 4\n"
            + "// Initialize newLocal InvocationTransformation invocation\n"
            + "LDC \"read (Z)I\"\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.start (Ljava/lang/String;)Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;\n"
            + "ASTORE 5\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_0\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 4\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "BALOAD\n"
            + "ISTORE 6\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 3\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "BALOAD\n"
            + "ISTORE 7\n"
            + "ILOAD 1\n"
            + "IFEQ L0\n"
            + "ILOAD 6\n"
            + "ISTORE 8\n"
            + "// MergedValue (TrackerPoint in 2)\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 4\n"
            + "ASTORE 2\n"
            + "GOTO L1\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ I be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/Invocation I I] []\n"
            + "ILOAD 7\n"
            + "ISTORE 8\n"
            + "// MergedValue (TrackerPoint in 2)\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 3\n"
            + "ASTORE 2\n"
            + "// FYI MergedValue merges here (TrackerPoint in 2)\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ I be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/TrackerPoint be/coekaerts/wouter/flowtracker/tracker/Invocation I I I] []\n"
            + "ILOAD 8\n"
            + "// begin InvocationReturnStore.insertTrackStatements\n"
            + "ALOAD 5\n"
            + "// MergedValue.loadSourcePoint\n"
            + "ALOAD 2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/tracker/Invocation.returning (Lbe/coekaerts/wouter/flowtracker/tracker/Invocation;Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)V\n"
            + "// end InvocationReturnStore.insertTrackStatements\n"
            + "IRETURN\n"
            + "MAXSTACK = 4\n"
            + "MAXLOCALS = 9\n");
  }

  @Test
  public void simpleLoop() {
    testTransform(new Object() {
                    @SuppressWarnings("unused")
                    void go() {
                      byte x = myByteArray[0];
                      byte y = myByteArray[1];
                      for (int i = 0; i < 2; i++) {
                        myByteArray[2] = x;
                      }
                    }
                  },
        "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_0\n"
            + "BALOAD\n"
            + "ISTORE 1\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "BALOAD\n"
            + "ISTORE 2\n"
            + "ICONST_0\n"
            + "ISTORE 3\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ I I I] []\n"
            + "ILOAD 3\n"
            + "ICONST_2\n"
            + "IF_ICMPGE L1\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_2\n"
            + "ILOAD 1\n"
            + "BASTORE\n"
            + "IINC 3 1\n"
            + "GOTO L0\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ I I] []\n"
            + "RETURN\n"
            + "MAXSTACK = 3\n"
            + "MAXLOCALS = 4\n",
        "// Initialize newLocal ArrayLoadValue PointTracker\n"
            + "ACONST_NULL\n"
            + "ASTORE 1\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_0\n"
            + "// begin ArrayLoadValue.insertTrackStatements\n"
            + "DUP2\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayLoadHook.getElementTracker (Ljava/lang/Object;I)Lbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;\n"
            + "ASTORE 1\n"
            + "// end ArrayLoadValue.insertTrackStatements\n"
            + "BALOAD\n"
            + "ISTORE 2\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_1\n"
            + "BALOAD\n"
            + "ISTORE 3\n"
            + "ICONST_0\n"
            + "ISTORE 4\n"
            + "L0\n"
            + "FRAME FULL [$THIS$ be/coekaerts/wouter/flowtracker/tracker/TrackerPoint I I I] []\n"
            + "ILOAD 4\n"
            + "ICONST_2\n"
            + "IF_ICMPGE L1\n"
            + "GETSTATIC $THISTEST$.myByteArray : [B\n"
            + "ICONST_2\n"
            + "ILOAD 2\n"
            + "// begin ArrayStore.insertTrackStatements: ArrayHook.set*(array, arrayIndex, value [already on stack], sourcePoint)\n"
            + "// ArrayLoadValue.loadSourcePoint\n"
            + "ALOAD 1\n"
            + "INVOKESTATIC be/coekaerts/wouter/flowtracker/hook/ArrayHook.setByte ([BIBLbe/coekaerts/wouter/flowtracker/tracker/TrackerPoint;)V\n"
            + "// end ArrayStore.insertTrackStatements\n"
            + "IINC 4 1\n"
            + "GOTO L0\n"
            + "L1\n"
            + "FRAME FULL [$THIS$ be/coekaerts/wouter/flowtracker/tracker/TrackerPoint I I] []\n"
            + "RETURN\n"
            + "MAXSTACK = 6\n"
            + "MAXLOCALS = 5\n");
  }

  /** A class with some complex flow, which at some point made the analyzer go crazy */
  @Test
  public void complex() {
    // not testing the result, just testing that it finished in a reasonable time
    testTransformClass(new Object() {
          @SuppressWarnings("all")
          void go(boolean bool) {
            int c1 = 0;
            for (int i = 0; i < 3; i++) {
              if (bool) {
                c1 = c1;
              } else {
                c1 = c1;
              }
              if (bool) {
                c1 = c1;
              } else {
                c1 = c1;
              }
              if (bool || bool || bool || bool || bool || bool) {
                c1 = c1;
              } else {
                c1 = c1;
              }
            }
          }
        }.getClass().getName(),
        c -> {},
        c -> {});
  }

  @Test
  public void fieldValueStack() {
    // not testing the result, just testing that it finished in a reasonable time
    testTransformClass(new Object() {
          char myChar;

          @SuppressWarnings("all")
          int read() {
            int result;
            deepStack(1, 2, 3, 4, 5, 6, 7, result = myChar);
            return result;
          }
        }.getClass().getName(),
        c -> {},
        c -> {});
  }

  // regression test for how we calculate maxStack for invocation instrumentation.
  // longs take two stack slots!
  @Test
  public void invocationArgMaxStack() {
    // not testing the result, just testing that it finishes successfully
    testTransformClass(new Object() {
          @SuppressWarnings("all")
          void write(byte x, long a, long b, long c, long d) {
            write(x, a, b, c, d);
          }
        }.getClass().getName(),
        c -> {},
        c -> {});
  }

  // regression test for how we calculate maxStack for invocation instrumentation.
  // longs take two stack slots!
  @Test
  public void invocationReturnMaxStack() {
    // not testing the result, just testing that it finishes successfully
    testTransformClass(new Object() {
          @SuppressWarnings("all")
          byte go() {
            return read(1, 2, 3);
          }

          @SuppressWarnings("all")
          byte read(long a, long b, long c) {
            return 0;
          }
        }.getClass().getName(),
        c -> {},
        c -> {});
  }

  /**
   * Given an object of a class that contains one method, tests if the code before and after
   * transformation are as expected;
   */
  static void testTransform(Object o, String expectOriginalCode, String expectedTransformedCode) {
    testTransformClass(o.getClass().getName(),
        originalCode -> assertEquals(expectOriginalCode, originalCode),
        transformedCode -> assertEquals(expectedTransformedCode, transformedCode));
  }

  static void testTransformClass(String className, Consumer<String> assertOriginalCode,
      Consumer<String> assertTransformedCode) {
    ClassWriter classWriter = new ClassWriter(0);
    StringWriter verifyStringWriter = new StringWriter();
    PrintWriter verifyPrintWriter = new PrintWriter(verifyStringWriter);

    String classInternalName = className.replace('.', '/');

    // writes out bytecode to text after transformation
    MethodPrintingClassVisitor afterVisitor =
        new MethodPrintingClassVisitor(new CheckClassAdapter(classWriter), classInternalName);
    ClassVisitor transformingVisitor =
        new FlowAnalyzingTransformer(new RealCommentator())
            .transform(classInternalName, afterVisitor);
    // writes out original bytecode to text
    MethodPrintingClassVisitor beforeVisitor =
        new MethodPrintingClassVisitor(transformingVisitor, classInternalName);

    try {
      new ClassReader(className)
          .accept(beforeVisitor, ClassReader.EXPAND_FRAMES | ClassReader.SKIP_DEBUG);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }

    // verify bytecode using asm. this is not as thorough as the jvm, but gives more helpful error
    // messages when it fails
    CheckClassAdapter.verify(new ClassReader(classWriter.toByteArray()), false, verifyPrintWriter);
    assertEquals("", verifyStringWriter.toString());

    try {
      verifyBytecodeJvm(className, classWriter.toByteArray());
    } catch (VerifyError e) {
      throw new AssertionError("Verification failed. Original code:\n" + beforeVisitor.getCode()
          + "\nTransformed code:\n" + afterVisitor.getCode(), e);
    }

    assertOriginalCode.accept(beforeVisitor.getCode());
    assertTransformedCode.accept(afterVisitor.getCode());
  }

  /**
   * Load a class (in a new classloader), to make the JVM verify its bytecode.
   *
   * @throws VerifyError if the bytecode is not valid
   */
  private static void verifyBytecodeJvm(String className, byte[] toVerify) {
    ClassLoader classLoader = new ClassLoader(null) {
      @Override
      protected Class<?> findClass(String name) throws ClassNotFoundException {
        if (name.equals(className)) {
          return defineClass(name, toVerify, 0, toVerify.length);
        }
        return super.findClass(name);
      }
    };
    try {
      // getDeclaredMethods() is called to trigger bytecode verification
      //noinspection ResultOfMethodCallIgnored
      classLoader.loadClass(className).getDeclaredMethods();
    } catch (ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * ClassVisitor that only sends the implementation of a method (not the rest of the class content)
   * to a Textifier.
   */
  private static class MethodPrintingClassVisitor extends ClassVisitor {

    final Textifier textifier = new CommentTextifier();
    final String thisName;

    public MethodPrintingClassVisitor(ClassVisitor cv, String thisName) {
      super(Opcodes.ASM9, cv);
      this.thisName = thisName;
    }

    @Override
    public MethodVisitor visitMethod(int access, String name, String desc, String signature,
        String[] exceptions) {
      // skip the constructor, that's not the method we're interested in
      if (name.equals("<init>")) {
        return null;
      }

      MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);
      return new TraceMethodVisitor(mv, textifier);
    }

    String getCode() {
      StringWriter sw = new StringWriter();
      textifier.print(new PrintWriter(sw));
      // remove indentation that's added by asm, but is only useful if the method implementation is
      // printed in the context of a whole class
      return sw.toString().replaceAll("^ +", "")
          .replaceAll("\n +", "\n")
          .replace(thisName, "$THIS$")
          .replace("be/coekaerts/wouter/flowtracker/weaver/flow/FlowAnalyzingTransformerTest",
              "$THISTEST$");
    }
  }

  /** Dummy method with a lot of arguments, to test if maxStack is updated correctly */
  @SuppressWarnings("all")
  static void deepStack(int a, int b, int c, int d, int e, int f, int g, int h) {
  }

  // method where both return value and argument value are tracked
  static byte trackInAndOut(byte in) {
    return in;
  }
}